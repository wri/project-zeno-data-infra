# Deploy the API
on:
  workflow_dispatch:
    inputs:
      commit_hash:
        required: true
        type: string
        description: The commit hash to deploy (currently the same hash is used for code and both images)
      dry_run:
        default: true
        required: false
        type: boolean
        description: When set to true only generates a plan, does not apply it
      workspace:
        default: "staging"
        required: true
        type: string
        description: The TF workspace to deploy to
  workflow_call:
    inputs:
      commit_hash:
        default: ${{ github.sha }}
        required: false
        type: string
      dry_run:
        default: true
        required: false
        type: boolean
      workspace:
        default: "default"
        required: false
        type: string
    secrets:
      AWS_REGION:
        required: true
      AWS_ZENO_ACCESS_KEY_ID:
        required: true
      AWS_ZENO_SECRET_ACCESS_KEY:
        required: true
      AWS_GFW_ACCESS_KEY_ID:
        required: true
      AWS_GFW_SECRET_ACCESS_KEY:
        required: true
      CONTAINER_REGISTRY:
        required: true
      GFW_API_KEY:
        required: true
      DASK_SCHEDULER_ADDRESS:
        required: true
      NEW_RELIC_LICENSE_KEY:
        required: true
      DASK_COILED_TOKEN:
        required: true
      PREFECT_API_KEY:
        required: true
      PREFECT_ACCOUNT_ID:
        required: true
      PREFECT_WORKSPACE_ID:
        required: true

env:
  CONTAINER_REPO_NAME: analytics-api

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        if: success()
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.commit_hash }}

      - name: Set image tags
        if: success()
        run: |
          echo "API_IMAGE_TAG=$(git rev-parse --short HEAD)_api" >> $GITHUB_ENV
          echo "PIPELINES_IMAGE_TAG=$(git rev-parse --short HEAD)_pipelines" >> $GITHUB_ENV

      - name: Set up Terraform
        if: success()
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.0

      # Manually triggered run, plan against staging and workspace state
      - name: Terraform init and workspace select with staging state file
        if: success() && (github.event_name == 'workflow_dispatch')
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ZENO_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ZENO_SECRET_ACCESS_KEY }}
        run: |
          cd terraform
          terraform init -backend-config=vars/backend-staging.tfvars
          terraform workspace select -or-create=true ${{ inputs.workspace }}

      # Automated run, plan against production
      - name: Terraform init with production state file
        if: success() && (github.event_name == 'push')
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ZENO_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ZENO_SECRET_ACCESS_KEY }}
        run: |
          cd terraform
          terraform init -backend-config=vars/backend-production.tfvars

      - name: Terraform plan
        if: success()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ZENO_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ZENO_SECRET_ACCESS_KEY }}
        run: |
          API_IMAGE=${{ secrets.CONTAINER_REGISTRY }}/${{ env.CONTAINER_REPO_NAME }}:${{ env.API_IMAGE_TAG }}
          PIPELINES_IMAGE=${{ secrets.CONTAINER_REGISTRY }}/${{ env.CONTAINER_REPO_NAME }}:${{ env.PIPELINES_IMAGE_TAG }}
          cd terraform
          terraform plan \
            -var="api_key=${{ secrets.GFW_API_KEY }}" \
            -var="api_image=$API_IMAGE" \
            -var="pipelines_image=$PIPELINES_IMAGE" \
            -var="aws_secret_access_key=${{secrets.AWS_ZENO_SECRET_ACCESS_KEY}}" \
            -var="aws_access_key_id=${{secrets.AWS_ZENO_ACCESS_KEY_ID}}" \
            -var="new_relic_license_key=${{ secrets.NEW_RELIC_LICENSE_KEY }}" \
            -var="coiled_token=${{ secrets.DASK_COILED_TOKEN }}" \
            -var="prefect_api_key=${{ secrets.PREFECT_API_KEY }}" \
            -var="prefect_account_id=${{ secrets.PREFECT_ACCOUNT_ID }}" \
            -var="prefect_workspace_id=${{ secrets.PREFECT_WORKSPACE_ID }}" \
            -var="gfw_aws_access_key_id=${{ secrets.AWS_GFW_ACCESS_KEY_ID }}" \
            -var="gfw_aws_secret_access_key=${{ secrets.AWS_GFW_SECRET_ACCESS_KEY }}" \
            --out=tf.plan

      - name: Terraform Apply
        if: success() && (inputs.dry_run == false)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ZENO_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ZENO_SECRET_ACCESS_KEY }}
        run: |
          cd terraform
          terraform apply -auto-approve tf.plan
